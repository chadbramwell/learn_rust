* rustup doc
* woops! some links below are to an older version of the book..

https://doc.rust-lang.org/book/second-edition/ch01-02-hello-world.html
* println! calls a Rust macro. If it called a function instead, it would be entered as println (without the !).

https://doc.rust-lang.org/book/second-edition/ch01-03-hello-cargo.html
* cargo new <project_name> --bin
* cargo build --release
* cargo run
* cargo check

https://doc.rust-lang.org/book/second-edition/ch02-00-guessing-game-tutorial.html#processing-a-guess
* variables are immutable by default
* declare a variable with 'let', declare it as mutable with 'mut'
* String::new() <- new is a function associated with type String
* std::io::stdin() <- returns an instance of std::io::Stdin
* & is a reference
* references, by default, are immutable.
* stdin().read_line(&mut guess)
* read_line returns an io::Result which is defined as Result<T, Error>
* cargo update
* extern crate rand;
* use rand::Rng; <- exposes 'traits' for the gen_range (Chap10 is traits)
* rand::thread_rng().gen_range(1,101);
* thread_rng is local to current thread and seeded by OS
* cargo doc --open
* use std::cmp::Ordering;
* match guess.cmp(&num) { Ordering::Less => println!("less"),}
* a match expression is made up of arms which is a combo of a pattern and code to run if something matches that pattern
* let guess: u32 = guess.trim().parse(); will panic with a value of -1 but not if we specify a type of i32.
* parse must be chosen based on return type! sweet
* loop
* match for Result<T, Error> { Ok(val) => val, Err(_) => continue }
* .expect() (panic/crash) -> match (handle gracefully)
* _ is catchall

https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html
* const (despite variables being immutable by default)
* const must be annotated
* const can't be the result of a function
* variable shadowing (as a suggestion for working around mutability without making anything mutable)
* shadowing also allows type changing
* let spaces = " "; let spaces = spaces.len();
* does not work due to type changing: let mut spaces = " "; spaces = spaces.len();
* two data type subsets: scalar & compound
* 4 scalar types: integers, floating-point, booleans, characters
* integer: i8, u8, 16, 32, 64, 128, isize, usize (i/usize = arch)
* 2s complement [-(2^(n-1)), (2^(n-1)-1)], and u=[0,(2^n)-1]
* numbers support underscores to aide in readability
* 98_222 = 98222
* Hex: 0xff
* Octal: 0o77
* Binary: 0b1111_0000
* Byte (u8 only): b'A'
* Integer overflow triggers a panic in debug builds!
* Use Wrapping type if you expect overflow
* f32, f64
* default integer is i32, default float is f64
* char is *not* C/C++ style char. it represents a single UTF8 character.
* 2 Compound types: tuple and array
* tuple looks like an indexable
* let tup = (500, 6.4, 1);
* let (x,y,z) = tup;  // this is called 'destructuring'
* let x: (i32, f64, u8) = (500, 6.4, 1); let one = x.2;
* arrays must have the same type (unlike tuple)
* arrays have a fixed length
* let a = [1, 2, 3, 4, 5];
* arrays allocated on the stack
* vector type (growable array) comes as part of standard library
* let a: [i32, 5] = [1, 2, 3, 4, 5];
* array out of bounds checked at runtime

https://doc.rust-lang.org/book/ch03-03-how-functions-work.html
* function signitures must declare type for paramaters
* x = y = 6 is not allowed in rust.
* every statement is seperate
* let x = (let y = 6); // error: expected expression, found statement (`let`)
* rust just got dumb for me. we have a compiler that can do wonderous things, why isn't it helping us? compile-time type information would be useful as a built-in feature. last line is always the return value seems... silly, especially when 'return x + 1;' is okay in a let = func(); but not okay in a let = {...};
* at least their built-in char vs u8 makes a ton of sense and is awesome. UTF8 support only and by default is wonderful.

https://doc.rust-lang.org/book/ch03-05-control-flow.html
* blocks of code for an if statement are also called arms (like with match)
* thought: if blocks are so fundamental to programming, it's a bummer they only work on 1bit of information... but I can't think of something better that isn't just math.... i mean, execution is just 1 instruction at a time... that bit for an if exists to move an instruction pointer to one place... so maybe there isn't something better?
* loop
* break
* break counter * 2;
* while
* loop + if + else + break is considered to be so common that while exists
* for
* such a stupid statement (because it sets up a bad way to write code and then suggests code that does the exact same thing but with syntactic sugar): "But this approach is error prone; we could cause the program to panic if the index length is incorrect. It’s also slow, because the compiler adds runtime code to perform the conditional check on every element on every iteration through the loop. As a more concise alternative, you can use a for loop ..."
* "for k,v in a {...}" such an obvious win, but instead we have to "for (k, v) in a.iter().enumerate() {...}"
* why is ".iter()" required?
* for n in (1..4).rev() { ... } // only iterates 3 values
* "More importantly, we’ve now increased the safety of the code and eliminated the chance of bugs that might result from going beyond the end of the array or not going far enough and missing some items." nice try, please solve real programming problems and common mistakes with your language not new programmer mistakes

https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html
* ownership rules: each value has one owner, when owner goes out of scope value is dropped
* let s = String::from("hello");
* rust calls 'drop' when a variable goes out of scope
* let s1 = String::from("hello"); let s2 = s1; s1 is now invalid (ownership transferred, Rust error: use of moved value: `s1`).
* shallow copy, deep copy, move. 3 different but important things to understand.
* s1 moved into s2.
* rust never deep-copies automatically. all copies should be considered inexpensive. (I wonder how true that is for structs... C# fell here)
* clone
* Rust has traits. (ch10) Copy is a trait on integers so you don't have to implement clone.
* Copy trait is illegal if your type requires drop (Drop trait).
* tuples can have the Copy trait if all internal members also have the Copy trait
* types either move or copy
* a function that takes a String will perform a move and any uses of the String after passing to that func will error
* interesting that 'move' is such a new concept to me and I only learned about it from recent C++ stuff... always thought it was specifically a compiler optimization (which it still is) but it's got a broader baseline of importance that Rust grabs onto. I like that.
* return values can also transfer ownership
* incoming: references... >_>

https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html
* s: &String
* omgwtfbbq, there's a dereference operator!? '*' ... like C. (ch 8, ch 15)
* references are immutable by default
* when I tried to add mutability... it took multiple steps working backwards. At every spot I had to add 'mut' to make it explicit what was going on. Nice!
* only one mutable reference to a piece of data in a particular scope
* boo: looks like wiping out reference doesn't fix double-borrow issue. scoping it might work..
* yep. scoped borrow works. borrow checker isn't as smart as I would expect. :{ ... could be a hard problem or intentional? who knows?
* they are calling the issues the borrow checker solves: 'data races' (prior to this, I've only seen it as 'data race' for threading bugs and 'data contention' for Load-Hit-Store)
* can have multiple immutable references
* compiler ain't smart when a reference is ditched... perhaps there's a keyword... either way, compiler is starting to get annoying. still better than C/C++ in a lot of ways...

https://doc.rust-lang.org/book/ch04-03-slices.html
* slice: return a section of a String
* bytes.iter().enumerate() returns a tuple (index, &item)
* string slices must land on a UTF8 character boundary.
* &str  <--- type for string slice
* let s = "Hello, world!"; // s is of type &str, it's a slice that points to a specific part of the compiled binary - where the string is!
* &str are immutable.
* can take slices of arrays too. type: &[i32]

https://doc.rust-lang.org/book/ch05-00-structs.html