Just a place for me to learn a bit of rust.
**I'm currently on ch5 of https://doc.rust-lang.org/book/**

I started with the online rust book https://doc.rust-lang.org/book/ (which can also be generated with "rustup doc", cool!).

I'll probably intermix working in that book and doing Advent of Code problems.

What I like:
* cargo new, run, check
* immutable by default
* UTF8 by default
* char is UTF8 character and that's explicitly different from u8
* 'arms' as a descriptor for if-check and match pathways
* break counter * 2;
* loop
* built-in .rev()
* _
* references are immutable by default
* slices! can be done in C/C++ but the compiler doesn't help but members in the C/C++ community don't talk about memory ownership much... slices are dependent on a strong understanding of ownership
* compile time error for string slices

Dislikes:
* No compile-time checking of array bounds, it's all run-time. And here I thought rust was about memory safety.
* No compile-time type system. (if you want to understand a type, suggestions online are to force a compiler error to give you type info...)
* Can't print tuples or arrays.
* Lack of simple "for k,v in a" instead it's "for k,v in a.iter().enumerate()"
* no way to tell compiler that a reference is gone within the same scope even if reference variable is mutable
* warnings sometimes about needing parenthesis, and sometimes not...

Looks promising:
* crate system for depedency management
* match (this'll take some time to get used to)
* destructuring
* copy vs move as core feature (move by default)

Confused by:
* () type that can be generated with let x = { ... }
* sometimes () must surround the first set of params in a for loop, sometimes not. destructure rules?
* unwrap vs expect
* parse vs to_string
